!     to compile 'gfortran Ex6-Quaglia-CODE.f90 -o Ex6-Quaglia-CODE.x'
!     to run the executable  './Ex6-Quaglia-CODE.x'

MODULE DEBUGMOD
  IMPLICIT NONE

  ! This module is to debug a code
  ! Each subroutine, defined in the interface "DEBUG" has 4 inputs:
  ! debug : logical flag. If TRUE the debug is activated 
  ! var : variable (that can be of any type) on which the debug is performed
  ! test : logical flag. If TRUE the check is activated 
  ! message : the warning strings that the user wants to print

  LOGICAL :: turn_debug_on

  INTERFACE DEBUG
     MODULE PROCEDURE INT4_DEBUG
     MODULE PROCEDURE INT2_DEBUG
     MODULE PROCEDURE REAL4_DEBUG
     MODULE PROCEDURE REAL8_DEBUG
     MODULE PROCEDURE CMPLX8_DEBUG
     MODULE PROCEDURE CMPLX16_DEBUG
     MODULE PROCEDURE CMPLX8MAT_DEBUG
     MODULE PROCEDURE CMPLX16MAT_DEBUG
     MODULE PROCEDURE REAL8MAT_DEBUG
     MODULE PROCEDURE REAL4MAT_DEBUG
     MODULE PROCEDURE INT2VEC_DEBUG
     MODULE PROCEDURE INT4VEC_DEBUG
  END INTERFACE DEBUG

  
CONTAINS
  
  SUBROUTINE INT4_DEBUG(debug,var,test,message)
    INTEGER*4 :: var ! 4 bytes integer variable 
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE INT4_DEBUG
  
  SUBROUTINE INT2_DEBUG(debug,var,test,message)
    INTEGER*2 :: var ! 2 bytes integer variable 
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE INT2_DEBUG

  SUBROUTINE CMPLX8_DEBUG(debug,var,test,message)
    COMPLEX*8 :: var ! single precision complex variable 
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE CMPLX8_DEBUG

  SUBROUTINE CMPLX16_DEBUG(debug,var, test,message)
    COMPLEX*16 :: var ! double precision complex variable
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE CMPLX16_DEBUG

  SUBROUTINE CMPLX8MAT_DEBUG(debug,var,test,message)
    COMPLEX*8, DIMENSION(:,:) :: var ! single precision complex matrix
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE CMPLX8MAT_DEBUG

  SUBROUTINE CMPLX16MAT_DEBUG(debug,var,message)
    COMPLEX*16, DIMENSION(:,:) :: var ! double precision complex matrix
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE CMPLX16MAT_DEBUG

  SUBROUTINE REAL8_DEBUG(debug,var,test,message)
    REAL*8 :: var        ! double precision real variable
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE REAL8_DEBUG

  SUBROUTINE REAL4_DEBUG(debug,var, test,message)
    REAL*4 :: var          ! single precision real variable 
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE REAL4_DEBUG

  SUBROUTINE REAL8MAT_DEBUG(debug,var,test,message)
    REAL*8, DIMENSION(:,:) :: var  ! a double precision real matrix 
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE REAL8MAT_DEBUG

  SUBROUTINE REAL4MAT_DEBUG(debug,var, test,message)
    REAL*4, DIMENSION(:,:) :: var  ! a single precision real matrix 
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE REAL4MAT_DEBUG

  SUBROUTINE INT4VEC_DEBUG(debug,var, test,message)
    INTEGER*4, DIMENSION(:) :: var   ! 4 bytes integer vector 
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE INT4VEC_DEBUG

  SUBROUTINE INT2VEC_DEBUG(debug,var, test,message)
    INTEGER*2, DIMENSION(:) :: var  ! 2 bytes integer vector 
    LOGICAL :: debug, test
    CHARACTER(*) :: message
    IF (debug .and. test) THEN       
       PRINT*, message
       PRINT*, "The variable to debug is: ", var
  
    ENDIF
  END SUBROUTINE INT2VEC_DEBUG

END MODULE DEBUGMOD


	MODULE HERMITE
	
	CONTAINS

	RECURSIVE FUNCTION HermitePoly(n) RESULT(hp_coeff)
	
	INTEGER*8 :: n
	REAL*8, DIMENSION(n+1) ::  hp_coeff, coef1, coef2

	IF(n .EQ. 0) THEN
		hp_coeff(1)=1.0
		RETURN
	END IF

	IF(n .EQ. 1) THEN
		hp_coeff(1)=2.0
		hp_coeff(2)=0.0
	ELSE

		coef1(1:n+1)=0.0
		coef1(1:n)=2.0*HermitePoly(n-1)

		coef2(1:n+1)=0.0
		coef2(3:)=2.0*(n-1)*HermitePoly(n-2)

		hp_coeff = coef1 - coef2

	END IF
	
	RETURN

	END FUNCTION
	
	FUNCTION evalHerm_Poly(xi,n) RESULT(y)
	
	INTEGER*8 :: n, pow_i, ii, jj
	REAL*8 :: xi(:), y(size(xi)),h_coeff(n+1)

	k=size(xi)

	h_coeff=HermitePoly(n)

	y(1:k)=h_coeff(n+1)
	
	pow_i=1
	
	DO ii=n,1,-1
		DO jj=1,k
			! Adding to the point in j-th position the 
			!  contribution given by the pow_i-th power
			!  of x_i multiplied by the proper coefficient
			y(jj) = y(jj)+h_coeff(ii)*xi(jj)**pow_i
		END DO
		! For simplicity, updating the power here
		pow_i = pow_i + 1
	END DO
	
	END FUNCTION

	
!	SUBROUTINE Herm0(x, y)
!		REAL*8, INTENT(IN) :: x
!		REAL*8, INTENT(OUT) :: y
!		y = 1
!	END SUBROUTINE Herm0
!	
!	SUBROUTINE Herm1(x, y)
!		REAL*8, INTENT(IN) :: x
!		REAL*8, INTENT(OUT) :: y
!		y = x
!	END SUBROUTINE Herm1
!	
!		SUBROUTINE Herm2(x, y)
!		REAL*8, INTENT(IN) :: x
!		REAL*8, INTENT(OUT) :: y
!		y = x**2 - 1
!	END SUBROUTINE Herm2
!	
!	SUBROUTINE Herm3(x, y)
!		REAL*8, INTENT(IN) :: x
!		REAL*8, INTENT(OUT) :: y
!		y = x**3 - 3*x
!	END SUBROUTINE
!	
!	SUBROUTINE Herm4(x, y)
!		REAL*8, INTENT(IN) :: x
!		REAL*8, INTENT(OUT) :: y
!		y = x**4 - 6*x**2 + 3
!	END SUBROUTINE
!	
!	SUBROUTINE Herm5(x, y)
!		REAL*8, INTENT(IN) :: x
!		REAL*8, INTENT(OUT) :: y
!		y = x**5 - 10*x**3 + 
!	END SUBROUTINE

	
	END MODULE HERMITE


MODULE SOLVE_AO
  ! This module contains the implementation of some functions and
  ! subroutine to solve the one dimensional time-independent Schrodinger
  ! equation though the finite difference method
  IMPLICIT NONE
  USE HERMITE
  
  DOUBLE PRECISION, PARAMETER :: h_bar = 1  ! fixed to 1 for simplicity
  DOUBLE PRECISION, PARAMETER :: PI = ACOS(-1.d0)

CONTAINS
  
  SUBROUTINE SEC_DERIVATIVE(N) RETURN m
    ! WARNING: of course this is the LAPLACIAN
    ! in greater dimensions

    ! this subroutine computes the second derivative
    ! (present in the momentum operator) on a
    ! discretized 1dimensional grid of size N

    DOUBLE COMPLEX, DIMENSION(:,:), ALLOCATABLE :: m  ! the matrix that we want
    INTEGER :: N, ii
    
    ALLOCATE(m(N,N))  ! the matrix is tridiagonal
    DO ii = 1,N
       m(ii,ii) = -2
       m(ii,ii+1) = 1
       m(ii,ii-1) = 1
    END DO
  END SUBROUTINE SEC_DERIVATIVE

  SUBROUTINE POTENTIAL(N,OMEGA,x_small,x_high) RETURN(m)
    
    ! this subroutine computes the diagonal matrix
    ! that represent the discretized harmonic potential
    ! on 1dimensional grid of size N
    
    DOUBLE COMPLEX, DIMENSION(:,:), ALLOCATABLE :: m  ! the matrix that we want
    INTEGER :: N, ii
    DOUBLE PRECISION :: OMEGA, x_small, x_high, step

    step=(x_high-x_small)/N
    ALLOCATE(m(N,N))
    DO ii=1,N
       m(ii,ii)=(omega*(x_small+step*(ii-1)))**2 ! diagonal elements
    END DO
    
  END SUBROUTINE POTENTIAL

  SUBROUTINE EIGVALS(m,egvals,info)
!!$  --------------------------------------------------------
!!$  This subroutine is a wrapper for the diagonalization
!!$  subroutine ZHEEV provided by LAPACK. 
!!$  ARGUMENTS:
!!$  (I/O) matr : a COMPLEX*16 matrix, the matrixto be diagonalized.
!!$               On return, it contains the eigenvectors.   
!!$  (O) egvals : a REAL*8 array, contains the eigenvalues
!!$  (O) info   : an INTEGER*4, communicating the status of
!!$               the diagonalization. If =0, all good.
!!$  --------------------------------------------------------

    COMPLEX*16, DIMENSION(:,:) :: m
    REAL*8, DIMENSION(SIZE(m,1)) :: egvals
    INTEGER*4 :: info
    ! utilities for zheev
    INTEGER*4 :: N,LWORK
    COMPLEX*16, DIMENSION(:), ALLOCATABLE :: WORK
    REAL*8, DIMENSION(:), ALLOCATABLE :: RWORK
    ! preparing for optimization
    LWORK=-1
    N=SIZE(matr,1)
    ALLOCATE(RWORK(3*N-2))
    ALLOCATE(WORK(1))
    ! querying optimal workspace
    CALL ZHEEV('V','U',N,matr,N,egvals,WORK,LWORK,RWORK,info)
    ! preparing to get the results
    LWORK=INT(WORK(1))
    DEALLOCATE(WORK)
    ALLOCATE(WORK(LWORK))
    CALL ZHEEV('V','U',N,matr,N,egvals,WORK,LWORK,RWORK,info)
    ! removing exhausted variables 
    DEALLOCATE(WORK,RWORK)
  END SUBROUTINE EIGVALS

  SUBROUTINE WRITE_ON_FILE(filename, array)
!!$  --------------------------------------------------------
!!$  This subroutine saves a 1D array on file. Useful for eigvals.
!!$  ARGUMENTS:
!!$  (I) filename  : a CHARACTER, of any length, the name of
!!$                  the output file
!!$  (I) array     : a REAL*8 array, that is to be saved
!!$  --------------------------------------------------------

    REAL*8, DIMENSION(:) :: array
    REAL*8, DIMENSION(:) :: xvals
    REAL*8, DIMENSION(:,:) :: mat
    CHARACTER(LEN=*) :: filename,filename1
    INTEGER*4 :: ii,jj
    
    OPEN(1, FILE=filename, STATUS="replace", ACTION="write")
    
    DO ii=1,SIZE(array,1)
       WRITE(1,*) array(ii)
    END DO
    CLOSE(1)
    
    OPEN(2, FILE=filename1, STATUS="replace", ACTION="write")
    
    DO ii=1,SIZE(mat,1)
       WRITE(2,*) xvals(ii), (mat(ii,jj), jj=1,SIZE(mat,2))
    END DO
    CLOSE(2)
    
    RETURN
  END SUBROUTINE WRITE_ON_FILE

  
END MODULE SOLVE_AO

! REFERENCES:
! https://sukhbinder.wordpress.com/hermite-polynomials-fortran-module/
! http://mathworld.wolfram.com/HermitePolynomial.html
! https://en.wikipedia.org/wiki/Hermite_polynomials


 PROGRAM ANALITIC_SOL
   USE DEBUGMOD
   USE HERMITE
   USE SOLVE_AO

   IMPLICIT NONE
   
 END PROGRAM ANALITIC_SOL

 PROGRAM FINIT_DIFF
   USE SOLVE_AO
   USE DEBUGMOD

   IMPLICIT NONE
 END PROGRAM FINIT_DIFF
